'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

exports.Push = Push;
exports.Pop = Pop;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function Push(name, type, defValue) {
  return function (Component) {
    var c = (function (_React$Component) {
      _inherits(c, _React$Component);

      function c() {
        _classCallCheck(this, c);

        _get(Object.getPrototypeOf(c.prototype), 'constructor', this).apply(this, arguments);
      }

      _createClass(c, [{
        key: 'render',
        value: function render() {
          return _react2['default'].createElement(Component, this.props);
        }
      }, {
        key: 'getChildContext',
        value: function getChildContext() {
          var contextObject = {};
          contextObject[name] = this.props[name];
          return contextObject;
        }
      }], [{
        key: 'propTypes',
        value: {},
        enumerable: true
      }, {
        key: 'childContextTypes',
        value: {},
        enumerable: true
      }]);

      return c;
    })(_react2['default'].Component);

    c.propTypes[name] = type;

    if (defValue) {
      c.defaultProps = {};
      c.defaultProps[name] = defValue;
    }

    c.childContextTypes[name] = type;

    return c;
  };
}

function Pop(name, type, execute) {
  return function (Component) {
    var c = (function (_React$Component2) {
      _inherits(c, _React$Component2);

      function c() {
        _classCallCheck(this, c);

        _get(Object.getPrototypeOf(c.prototype), 'constructor', this).apply(this, arguments);
      }

      _createClass(c, [{
        key: 'render',
        value: function render() {
          var propFromContext = {};
          if (execute) propFromContext[name] = this.context[name]();else propFromContext[name] = this.context[name];
          return _react2['default'].createElement(Component, _extends({}, this.props, propFromContext));
        }
      }], [{
        key: 'contextTypes',
        value: {},
        enumerable: true
      }]);

      return c;
    })(_react2['default'].Component);
    c.contextTypes[name] = type;

    return c;
  };
}