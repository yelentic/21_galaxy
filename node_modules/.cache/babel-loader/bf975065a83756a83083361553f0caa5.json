{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport countries from './countries';\n\nvar ReactFlagsSelect = function (_Component) {\n  _inherits(ReactFlagsSelect, _Component);\n\n  function ReactFlagsSelect(props) {\n    _classCallCheck(this, ReactFlagsSelect);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    var defaultCountry = countries[_this.props.defaultCountry] && _this.props.defaultCountry;\n    _this.state = {\n      openOptions: false,\n      defaultCountry: defaultCountry,\n      filteredCountries: []\n    };\n    _this.toggleOptions = _this.toggleOptions.bind(_this);\n    _this.closeOptions = _this.closeOptions.bind(_this);\n    _this.onSelect = _this.onSelect.bind(_this);\n    _this.filterSearch = _this.filterSearch.bind(_this);\n    _this.setCountries = _this.setCountries.bind(_this);\n    return _this;\n  }\n\n  ReactFlagsSelect.prototype.toggleOptions = function toggleOptions() {\n    !this.state.disabled && this.setState({\n      openOptions: !this.state.openOptions\n    });\n  };\n\n  ReactFlagsSelect.prototype.toggleOptionsWithKeyboard = function toggleOptionsWithKeyboard(evt) {\n    evt.preventDefault();\n\n    if (evt.keyCode === 13) {\n      //enter key: toggle options\n      this.toggleOptions();\n    } else if (evt.keyCode === 27) {\n      //esc key: hide options\n      !this.state.disabled && this.setState({\n        openOptions: false\n      });\n    }\n  };\n\n  ReactFlagsSelect.prototype.closeOptions = function closeOptions(event) {\n    if (event.target !== this.refs.selectedFlag && event.target !== this.refs.flagOptions && event.target !== this.refs.filterText) {\n      this.setState({\n        openOptions: false\n      });\n    }\n  };\n\n  ReactFlagsSelect.prototype.onSelect = function onSelect(countryCode) {\n    this.setState({\n      selected: countryCode,\n      filter: ''\n    });\n    this.props.onSelect && this.props.onSelect(countryCode);\n  };\n\n  ReactFlagsSelect.prototype.onSelectWithKeyboard = function onSelectWithKeyboard(evt, countryCode) {\n    evt.preventDefault();\n\n    if (evt.keyCode === 13) {\n      //enter key: select\n      this.onSelect(countryCode);\n      this.closeOptions(evt);\n    } else if (evt.keyCode === 27) {\n      //esc key: hide options\n      this.toggleOptions();\n    }\n  };\n\n  ReactFlagsSelect.prototype.updateSelected = function updateSelected(countryCode) {\n    var isValid = countries[countryCode];\n    isValid && this.setState({\n      selected: countryCode\n    });\n  };\n\n  ReactFlagsSelect.prototype.filterSearch = function filterSearch(evt) {\n    var _this2 = this;\n\n    var filterValue = evt.target.value;\n    var filteredCountries = filterValue && this.state.countries.filter(function (key) {\n      var label = _this2.props.customLabels[key] || countries[key];\n      return label && label.match(new RegExp(filterValue, 'i'));\n    });\n    this.setState({\n      filter: filterValue,\n      filteredCountries: filteredCountries\n    });\n  };\n\n  ReactFlagsSelect.prototype.setCountries = function setCountries() {\n    var _this3 = this;\n\n    var fullCountries = Object.keys(countries);\n    var selectCountries = this.props.countries && this.props.countries.filter(function (country) {\n      return countries[country];\n    }); //Filter BlackList\n\n    if (this.props.blackList && selectCountries) {\n      selectCountries = fullCountries.filter(function (countryKey) {\n        return selectCountries.filter(function (country) {\n          return countryKey === country;\n        }).length === 0;\n      });\n    }\n\n    this.setState({\n      countries: selectCountries || fullCountries\n    }, function () {\n      var selected = _this3.state.selected;\n\n      if (selected && !_this3.state.countries.includes(selected)) {\n        _this3.setState({\n          selected: null\n        });\n      }\n    });\n  };\n\n  ReactFlagsSelect.prototype.componentDidMount = function componentDidMount() {\n    this.setCountries();\n    !this.props.disabled && window.addEventListener(\"click\", this.closeOptions);\n  };\n\n  ReactFlagsSelect.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (prevProps.countries !== this.props.countries || prevProps.blackList !== this.props.blackList) {\n      this.setCountries();\n    }\n  };\n\n  ReactFlagsSelect.prototype.componentWillUnmount = function componentWillUnmount() {\n    !this.props.disabled && window.removeEventListener(\"click\", this.closeOptions);\n  };\n\n  ReactFlagsSelect.prototype.render = function render() {\n    var _this4 = this;\n\n    var isSelected = this.state.selected || this.state.defaultCountry;\n    var selectedSize = this.props.selectedSize;\n    var optionsSize = this.props.optionsSize;\n    var alignClass = this.props.alignOptions.toLowerCase() === 'left' ? 'to--left' : '';\n    return React.createElement('div', {\n      className: 'flag-select ' + (this.props.className ? this.props.className : \"\")\n    }, React.createElement('div', {\n      ref: 'selectedFlag',\n      style: {\n        fontSize: selectedSize + 'px'\n      },\n      className: 'selected--flag--option ' + (this.props.disabled ? 'no--focus' : ''),\n      tabIndex: '0',\n      onClick: this.toggleOptions,\n      onKeyUp: function onKeyUp(evt) {\n        return _this4.toggleOptionsWithKeyboard(evt);\n      }\n    }, isSelected && React.createElement('span', {\n      className: 'country-flag',\n      style: {\n        width: selectedSize + 'px',\n        height: selectedSize + 'px'\n      }\n    }, React.createElement('img', {\n      src: require('../flags/' + isSelected.toLowerCase() + '.svg'),\n      alt: isSelected\n    }), this.props.showSelectedLabel && React.createElement('span', {\n      className: 'country-label'\n    }, this.props.customLabels[isSelected] || countries[isSelected])), !isSelected && React.createElement('span', {\n      className: 'country-label'\n    }, this.props.placeholder), React.createElement('span', {\n      className: 'arrow-down ' + (this.props.disabled ? 'hidden' : '')\n    }, \"\\u25BE\")), this.state.openOptions && React.createElement('div', {\n      ref: 'flagOptions',\n      style: {\n        fontSize: optionsSize + 'px'\n      },\n      className: 'flag-options ' + alignClass\n    }, this.props.searchable && React.createElement('div', {\n      className: 'filterBox'\n    }, React.createElement('input', {\n      type: 'text',\n      placeholder: this.props.searchPlaceholder,\n      ref: 'filterText',\n      onChange: this.filterSearch\n    })), (this.state.filter ? this.state.filteredCountries : this.state.countries).map(function (countryCode) {\n      return React.createElement('div', {\n        className: 'flag-option ' + (_this4.props.showOptionLabel ? 'has-label' : ''),\n        key: countryCode,\n        tabIndex: '0',\n        onClick: function onClick() {\n          return _this4.onSelect(countryCode);\n        },\n        onKeyUp: function onKeyUp(evt) {\n          return _this4.onSelectWithKeyboard(evt, countryCode);\n        }\n      }, React.createElement('span', {\n        className: 'country-flag',\n        style: {\n          width: optionsSize + 'px',\n          height: optionsSize + 'px'\n        }\n      }, React.createElement('img', {\n        src: require('../flags/' + countryCode.toLowerCase() + '.svg')\n      }), _this4.props.showOptionLabel && React.createElement('span', {\n        className: 'country-label'\n      }, _this4.props.customLabels[countryCode] || countries[countryCode])));\n    })));\n  };\n\n  return ReactFlagsSelect;\n}(Component);\n\nReactFlagsSelect.defaultProps = {\n  selectedSize: 16,\n  optionsSize: 14,\n  placeholder: \"Select a country\",\n  showSelectedLabel: true,\n  showOptionLabel: true,\n  alignOptions: \"right\",\n  customLabels: {},\n  disabled: false,\n  blackList: false,\n  searchable: false,\n  searchPlaceholder: 'Search'\n};\nReactFlagsSelect.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  countries: PropTypes.array,\n  blackList: PropTypes.bool,\n  customLabels: PropTypes.object,\n  selectedSize: PropTypes.number,\n  optionsSize: PropTypes.number,\n  defaultCountry: PropTypes.string,\n  placeholder: PropTypes.string,\n  className: PropTypes.string,\n  showSelectedLabel: PropTypes.bool,\n  showOptionLabel: PropTypes.bool,\n  alignOptions: PropTypes.string,\n  onSelect: PropTypes.func,\n  disabled: PropTypes.bool,\n  searchable: PropTypes.bool,\n  searchPlaceholder: PropTypes.string\n} : {};\nexport default ReactFlagsSelect;","map":null,"metadata":{},"sourceType":"module"}