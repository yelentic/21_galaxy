'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _radium = require('radium');

var _radium2 = _interopRequireDefault(_radium);

var _color = require('color');

var _color2 = _interopRequireDefault(_color);

var _rippleJsx = require('../ripple.js');

var _rippleJsx2 = _interopRequireDefault(_rippleJsx);

var Fab = (function (_React$Component) {
  _inherits(Fab, _React$Component);

  function Fab() {
    _classCallCheck(this, Fab);

    _get(Object.getPrototypeOf(Fab.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Fab, [{
    key: 'render',
    value: function render() {
      var _this = this;

      var _props = this.props;
      var enabled = _props.enabled;
      var color = _props.color;
      var ripple = _props.ripple;
      var children = _props.children;

      var styleButton = _extends({}, styles.button);
      var styleBase = _extends({}, styles.buttonBase);
      styleButton.color = color;
      var rippleColor = color;
      if (color !== '#000' && enabled) {
        var c = (0, _color2['default'])(color);
        c.alpha(0.9).lighten(0.1);
        if (ripple !== true) styleButton[':focus'].backgroundColor = c.rgbString();
        styleBase.color = 'white';
        styleBase.backgroundColor = color;
        var rc = (0, _color2['default'])(color).alpha(0.7).lighten(0.7);
        rippleColor = rc.rgbString();
      }

      if (!enabled) {
        delete styleButton[':active'];
        delete styleButton[':focus'];
        delete styleButton[':hover'];
        return _react2['default'].createElement(
          'button',
          {
            style: [styleButton, styleBase, styles.disabled],
            disabled: true
          },
          _react2['default'].createElement(
            'i',
            { style: styles.icon },
            children
          )
        );
      }

      var markupRipple;
      if (ripple) {
        delete styleButton[':active'];
        delete styleButton[':focus'].backgroundColor;
        markupRipple = _react2['default'].createElement(_rippleJsx2['default'], { center: false, color: rippleColor, container: styles.ripple });
      }

      return _react2['default'].createElement(
        'button',
        {
          style: [styleButton, styleBase],
          onClick: this.onClick.bind(this),
          className: 'reactmd-button-raisedbutton',
          onMouseLeave: this.onEnd.bind(this),
          onMouseUp: this.onEnd.bind(this),
          onTouchEnd: this.onEnd.bind(this),
          ref: function (e) {
            return _this.button = e;
          }
        },
        _react2['default'].createElement(
          'i',
          { style: styles.icon },
          children
        ),
        markupRipple
      );
    }
  }, {
    key: 'onClick',
    value: function onClick() {
      if (this.props.onClick) this.props.onClick();
    }
  }, {
    key: 'onEnd',
    value: function onEnd() {
      this.button.blur();
    }
  }], [{
    key: 'propTypes',
    value: {
      enabled: _react2['default'].PropTypes.bool,
      color: _react2['default'].PropTypes.string,
      ripple: _react2['default'].PropTypes.bool,
      onClick: _react2['default'].PropTypes.func.isRequired
    },
    enumerable: true
  }, {
    key: 'defaultProps',
    value: {
      enabled: true,
      color: '#000',
      ripple: false
    },
    enumerable: true
  }]);

  return Fab;
})(_react2['default'].Component);

exports.Fab = Fab;
exports['default'] = (0, _radium2['default'])(Fab);

var styles = {
  button: {
    //color: '#000',

    fontFamily: 'Roboto,Helvetica,Arial,sans-serif',
    fontSize: 24,
    fontWeight: 500,
    textTransform: 'uppercase',
    letterSpacing: 0,

    height: 56,
    minWidth: 64,
    lineHeight: '36px',
    padding: '0 16px',

    border: 'none',
    borderRadius: '50%',
    position: 'relative',
    display: 'inline-block',
    overflow: 'hidden',
    willChange: 'box-shadow,transform',
    transition: 'box-shadow .2s cubic-bezier(.4,0,1,1),background-color .2s cubic-bezier(.4,0,.2,1),color .2s cubic-bezier(.4,0,.2,1)',
    outline: 'none',
    cursor: 'pointer',
    textDecoration: 'none',
    textAlign: 'center',
    verticalAlign: 'middle',
    WebkitTapHighlightColor: 'rgba(255,255,255,0)',

    ':active': {
      backgroundColor: 'rgba(158,158,158,.4)',
      boxShadow: '0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12),0 2px 4px -1px rgba(0,0,0,.2)'
    },

    ':focus': {
      boxShadow: '0 0 8px rgba(0,0,0,.18),0 8px 16px rgba(0,0,0,.36)'
    },

    ':hover': {
      boxShadow: '0 0 8px rgba(0,0,0,.18),0 8px 16px rgba(0,0,0,.36)'
    },

    boxShadow: '0 2px 2px 0 rgba(0,0,0,.14),0 3px 1px -2px rgba(0,0,0,.2),0 1px 5px 0 rgba(0,0,0,.12)'
  },

  buttonBase: {
    backgroundColor: 'rgba(158,158,158,.2)',
    boxShadow: '0 2px 2px 0 rgba(0,0,0,.14),0 3px 1px -2px rgba(0,0,0,.2),0 1px 5px 0 rgba(0,0,0,.12)'
  },

  icon: {
    verticalAlign: 'middle',
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translate(-12px,-12px)',
    lineHeight: '24px',
    width: 24,
    fontFamily: 'Material Icons',
    fontStyle: 'normal',
    textTransform: 'none',
    fontFeatureSettings: '\'liga\'',
    WebkitFontFeatureSettings: '\'liga\'',
    WebkitFontSmoothing: 'antialiased'
  },

  disabled: {
    color: 'rgba(0,0,0,.26)',
    cursor: 'default'
  },

  ripple: {
    top: 0,
    left: 0,
    height: '100%',
    width: '100%',
    borderRadius: '50%'
  }

};